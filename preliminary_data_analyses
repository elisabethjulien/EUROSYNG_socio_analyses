######################
#   Data Overview    #
#                    #
######################
library(dplyr)
library(tidyr)
library(writexl)

####################################################################################################################################

#Overview of sociodemographic profiles of respondents:
# by counting occurrence of each unique value per column of interest, then calculating it as a percentage

#Summary percentage of gender
value_counts <- table(por_df$gender)
percentages_gender <- prop.table(value_counts) * 100
print(percentages_gender)

#Summary percentage of age
value_counts <- table(por_df$age)
percentages_age <- prop.table(value_counts) * 100
print(percentages_age)

#Summary percentage of education
value_counts <- table(por_df$edu)
percentages_education <- prop.table(value_counts) * 100
print(percentages_education)

#Summary percentage of respondents' residence's proximity to coast 
value_counts <- table(por_df$coast)
percentages_coast <- prop.table(value_counts) * 100
print(percentages_coast)

#Summary percentage of employment type
value_counts <- table(por_df$job)
percentages_job <- prop.table(value_counts) * 100
print(percentages_job)

#Summary percentage of respondents' residence's proximity to a marine proteted area
value_counts <- table(por_df$mpa_prox)
print(value_counts)
percentages_mpa <- prop.table(value_counts) * 100
print(percentages_mpa)

####################################################################################################################################

# Number of response and percentage reponse for question 1. Have you heard about Syngnathids previously?

df %>%
  filter(!is.na(syngnathid_prev)) %>%  # Remove NA values
  group_by(syngnathid_prev) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = (Count / sum(Count)) * 100) %>%
  arrange(desc(Percentage))  # Sort from highest to lowest

# A tibble: 3 × 3
#  syngnathid_prev Count Percentage
#            <dbl> <int>      <dbl>
#1               0   546      58.1 
#2               1   357      38.0 
#3               2    37       3.94

####################################################################################################################################

# Number of response and percentage reponse for question 2. Please rate your knowledge about Syngnathids. 

df %>%
  filter(!is.na(perceived_knowledge)) %>%  # Remove NA values
  group_by(perceived_knowledge) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = (Count / sum(Count)) * 100) %>%
  arrange(desc(Percentage))  # Sort from highest to lowest

  # A tibble: 4 × 3
  #perceived_knowledge Count Percentage
  #<ord>               <int>      <dbl>
#1 No knowledge          504     55.0  
#2 Basic knowledge       345     37.7  
#3 Knowledgeable          61      6.66 
#4 Expert knowledge        6      0.655

 #Most respondents (55%) believe they do not have any knowledge about syngnathids, 37% think they have basic knowledge, 6.7% believe they are knowledgeable, and less than 1% of respondents consider themselves to be experts on the topic. 

####################################################################################################################################
# Number of response and percentage reponse for question 4. Please rate the following statements as “True” or “False”. Please tick one option.

truefalse_columns <- c("trueorfalse_a", "trueorfalse_b", "trueorfalse_c", "trueorfalse_d", 
                      "trueorfalse_e", "trueorfalse_f", "trueorfalse_g", "trueorfalse_h", 
                      "trueorfalse_i", "trueorfalse_j", "trueorfalse_k")

# Reshape data into long format and remove NA values
df_long <- df %>%
  select(all_of(truefalse_columns)) %>%
  pivot_longer(cols = everything(), names_to = "question", values_to = "response") %>%
  filter(!is.na(response))  # Exclude NA values

# Count occurrences of each response per question
summary_table <- df_long %>%
  group_by(question, response) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(question) %>%
  mutate(percentage = round(100 * count / sum(count), 2)) %>%
  pivot_wider(names_from = response, values_from = c(count, percentage), values_fill = 0)

# Print the summary table
print(summary_table)

####################################################################################################################################
# Number of response and percentage reponse for question 5. In general, how threatened do you think seahorses and pipefishes are by human activities and/or environmental impacts? 

# Count occurrences and calculate percentages
summary_table <- df %>%
  filter(!is.na(threatened)) %>%  # Remove NA values
  group_by(threatened) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(percentage = round(100 * count / sum(count), 2)) %>%
  arrange(desc(count))  # Sort by count in descending order

# Print the table
print(summary_table)

####################################################################################################################################
# Number of response and percentage reponse for question 6. If you considered seahorses and pipefishes as species somehow threatened, please rank the following threats where 1=threat ranked most harmful to 7=threat ranked least harmful (scale from 1 to 7, no repeats).


# Define columns to check
rankthreat_columns <- c("rankthreat_a", "rankthreat_b", "rankthreat_c", "rankthreat_d", 
                        "rankthreat_e", "rankthreat_f", "rankthreat_g")

# Create summary table
summary_table <- data.frame(
  Column = rankthreat_columns,
  Sum = sapply(rankthreat_columns, function(col) sum(df[[col]], na.rm = TRUE)),
  Count_Non_NA = sapply(rankthreat_columns, function(col) sum(!is.na(df[[col]]))), # Count of non-NA responses
  Sum_Per_Total = sapply(rankthreat_columns, function(col) 
    sum(df[[col]], na.rm = TRUE) / sum(!is.na(df[[col]]))
  )
)

# Print the table
print(summary_table)


####################################################################################################################################
# Number of response and percentage reponse for question 10. In your opinion what are the main contributions of seahorses and pipefishes to human wellbeing?

df_summary_corrected <- df %>%
  select(starts_with("contribut_")) %>%
  pivot_longer(cols = everything(), names_to = "Question", values_to = "Response") %>%
  filter(!is.na(Response)) %>%
  group_by(Question, Response) %>%
  summarise(Count = n(), .groups = "drop") %>%
  # Calculate the total count for each question (ignoring NA values)
  group_by(Question) %>%
  mutate(Total = sum(Count)) %>%
  ungroup() %>%
  # Calculate percentage as (Count / Total) * 100
  mutate(Percentage = (Count / Total) * 100) %>%
  select(-Total)  # Drop the 'Total' column after calculating percentages

# Reshape the data to wide format
df_summary_wide <- df_summary_corrected %>%
  pivot_wider(names_from = Response, values_from = c(Count, Percentage), names_glue = "{Response}_{.value}")

# Print the final table
print(df_summary_wide)

#visualisation with a box whisker plot

#take away IDks
df <- df %>%
  mutate(across(starts_with("contribut_"), ~ case_when(
    . == "No benefit" ~ 0,
    . == "Slight benefit" ~ 1,
    . == "Moderate beneficial" ~ 2,
    . == "Very beneficial" ~ 3,
    . == "Extremely beneficial" ~ 4,
    . == "Don’t know/hard to say" ~ NA,
    TRUE ~ as.numeric(.)
  )))

# Reshape your data into long format for plotting
df_long <- df %>%
  select(starts_with("contribut_")) %>%
  pivot_longer(cols = everything(), names_to = "Question", values_to = "Response") %>%
  filter(!is.na(Response))  # Remove NAs

# Create the boxplot
ggplot(df_long, aes(x = Question, y = Response)) +
  geom_boxplot() +
  scale_y_continuous(breaks = 0:4) +  # Set y-axis scale from 0 to 4
  theme_minimal() +
  labs(title = "Distribution of Responses for Each Contribution Question", 
       x = "Contribution Questions", 
       y = "Response (0 to 4)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Tilt x-axis labels for readability

#visulation with Diverging bars with neutrals separate: tentative (not great but best til now)

df_long <- df_long %>%
  mutate(
    Response_Type = case_when(
      Response == 0 ~ "Very Negative",   # 0 = No benefit
      Response == 1 ~ "Negative",        # 1 = Slight benefit
      Response == 2 ~ "Neutral",         # 2 = Moderate beneficial
      Response == 3 ~ "Positive",        # 3 = Very beneficial
      Response == 4 ~ "Very Positive",   # 4 = Extremely beneficial
      is.na(Response) ~ "NA/Don't Know", # Handle NA or Don't Know
      TRUE ~ "Other"                     # In case there are any outliers
    )
  )

# Recalculate percentages and adjust for positioning on the graph
df_summary <- df_long %>%
  group_by(Question, Response_Type) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(Question) %>%
  mutate(Percentage = (Count / sum(Count)) * 100) %>%
  ungroup() %>%
  mutate(
    Adjusted_Percentage = case_when(
      Response_Type == "Very Negative" ~ -Percentage,  # Negative responses
      Response_Type == "Negative" ~ -Percentage,       # Negative responses
      Response_Type == "Neutral" ~ 0.1,                # Slightly right of center for neutral
      Response_Type == "NA/Don't Know" ~ 0.15,         # Place NA/Don't Know on the far right
      TRUE ~ Percentage  # Positive responses
    )
  )

# Create the diverging bar chart with NA/Don't Know included
ggplot(df_summary, aes(x = Adjusted_Percentage, y = Question, fill = Response_Type)) +
  geom_bar(stat = "identity", width = 0.7, position = "identity") +
  scale_fill_manual(values = c(
    "Very Negative" = "#800000",  # Darker red for Very Negative
    "Negative" = "#d73027",      # Lighter red for Negative
    "Neutral" = "#f7f7f7",       # Neutral in gray
    "Positive" = "#1a9850",      # Green for Positive
    "Very Positive" = "#006837", # Dark green for Very Positive
    "NA/Don't Know" = "#A9A9A9"  # Gray for Don't Know/NA
  )) +
  labs(
    title = "Distribution of Responses for Contribution Questions",
    x = "Percentage of Responses",
    y = "Contribution Questions",
    fill = "Response Type"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.caption = element_text(size = 12, color = "gray60", hjust = 1),
    legend.position = "top"
  ) +
  geom_vline(xintercept = 0, color = "black", size = 1)  # Vertical line at 0 (neutral)



####################################################################################################################################
# Number of response and percentage reponse for question 12. How often do you consume information about seahorses and pipefishes? Please tick one option.

# Create summary table
summary_table <- df %>%
  filter(!is.na(consump_freq)) %>%  # Remove NA values
  group_by(consump_freq) %>%
  summarise(Frequency = n(), .groups = "drop") %>%
  mutate(Percentage = round(100 * Frequency / sum(Frequency), 2)) %>%
  arrange(desc(Frequency))  # Sort by most frequent response

# Print the table
print(summary_table)

####################################################################################################################################
# Number of response and percentage reponse for question 13. What sources have most contributed to your current knowledge on seahorses and pipefishes? 

# Count occurrences and calculate percentages
value_count <- df %>%
  mutate(info_sources_split = strsplit(info_sources, ", ")) %>%  # Split by comma and space
  unnest(info_sources_split) %>%  # Unnest the list into individual rows
  group_by(info_sources_split) %>%  # Group by the individual values
  summarise(Count = n(), .groups = "drop") %>%  # Count occurrences
  mutate(
    Percentage = (Count / sum(!is.na(df$info_sources))) * 100  # Calculate percentage
  ) %>%
  arrange(desc(Count))  # Sort by count in descending order

# Print the result
print(value_count)

####################################################################################################################################
# Number of response and percentage reponse for question 14. In general, how interested would you be in news/information about seahorses and pipefishes? 

# Create summary table
summary_table <- df %>%
  filter(!is.na(inform_interest)) %>%  # Remove NA values
  group_by(inform_interest) %>%
  summarise(Frequency = n(), .groups = "drop") %>%
  mutate(Percentage = round(100 * Frequency / sum(Frequency), 2)) %>%
  arrange(desc(Frequency))  # Sort by most frequent response

# Print the table
print(summary_table)

####################################################################################################################################
# Number of response and percentage reponse for question 15. Are you interested in more information on things you can do to help protect seahorses and pipefishes?

# Create summary table
summary_table <- df %>%
  filter(!is.na(inform_conservation_interest)) %>%  # Remove NA values
  group_by(inform_conservation_interest) %>%
  summarise(Frequency = n(), .groups = "drop") %>%
  mutate(Percentage = round(100 * Frequency / sum(Frequency), 2)) %>%
  arrange(desc(Frequency))  # Sort by most frequent response

# Print the table
print(summary_table)

####################################################################################################################################
# Number of response and percentage reponse for question 16. In your opinion, to which audiences should communication efforts be directed to have an effective impact on the conservation of seahorses and pipefishes? 

# Count occurrences and calculate percentages
value_count <- df %>%
  mutate(communication_audience_split = strsplit(communication_audience, ", ")) %>%  # Split by comma and space
  unnest(communication_audience_split) %>%  # Unnest the list into individual rows
  group_by(communication_audience_split) %>%  # Group by the individual values
  summarise(Count = n(), .groups = "drop") %>%  # Count occurrences
  mutate(
    Percentage = (Count / sum(!is.na(df$communication_audience))) * 100  # Calculate percentage
  ) %>%
  arrange(desc(Count))  # Sort by count in descending order


sum(!is.na(df$communication_audience))
    
# Print the result
print(value_count)

####################################################################################################################################
# Number of response and percentage reponse for question 18. Would you be willing to engage in conservation initiatives to protect seahorses and pipefishes? 

# Create summary table
summary_table <- df %>%
  filter(!is.na(will_to_engange)) %>%  # Remove NA values
  group_by(will_to_engange) %>%
  summarise(Frequency = n(), .groups = "drop") %>%
  mutate(Percentage = round(100 * Frequency / sum(Frequency), 2)) %>%
  arrange(desc(Frequency))  # Sort by most frequent response

# Print the table
print(summary_table)

